set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim

" Encoding
set encoding=utf-8
set fileencoding=utf-8

" Window pane opening
set splitright
set splitbelow

" File buffer
set autoread

" Recursive path traversal
set path+=**

" Set line number
set number

" Set backup to none
set nobackup
set noswapfile

" Space indentation
set tabstop=2
set shiftwidth=2
set expandtab

" Using vim-lightline, thus disabling current mode status
set noshowmode

" Search pattern
set ignorecase
set smartcase

" Highlighting search
set hlsearch
set incsearch

" No update of screen on macro/script execution
set lazyredraw

" Show cursor position all the time
set ruler

" OSX weird behaviour using backspace
set backspace=indent,eol,start

call vundle#begin()

Plugin 'VundleVim/Vundle.vim'
Plugin 'itchyny/lightline.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'airblade/vim-gitgutter'
Plugin 'tpope/vim-commentary'
Plugin 'mattn/emmet-vim'
Plugin 'jiangmiao/auto-pairs'
Plugin 'fatih/vim-go'
Plugin 'tpope/vim-surround'
Plugin 'luochen1990/rainbow'
Plugin 'leafgarland/typescript-vim'
Plugin 'neovimhaskell/haskell-vim'
Plugin 'pangloss/vim-javascript'
Plugin 'reasonml-editor/vim-reason-plus'
Plugin 'rust-lang/rust.vim'
Plugin 'rescript-lang/vim-rescript'
Plugin 'purescript-contrib/purescript-vim'
Plugin 'scalameta/nvim-metals'

" Themes
Plugin 'Rigellute/shades-of-purple.vim'
Plugin 'pineapplegiant/spaceduck'
Plugin 'NLKNguyen/papercolor-theme'

if has('nvim')
  Plugin 'neoclide/coc.nvim'
  Plugin 'nvim-lua/popup.nvim'
  Plugin 'nvim-lua/plenary.nvim'
  Plugin 'nvim-telescope/telescope.nvim'
  Plugin 'Olical/conjure'
else
  Plugin 'w0rp/ale'
  Plugin 'ctrlpvim/ctrlp.vim'
  Plugin 'ycm-core/YouCompleteMe'
  Plugin 'tpope/vim-fireplace'
  Plugin 'tpope/vim-salve'
  Plugin 'quramy/tsuquyomi'
endif

call vundle#end()
filetype plugin indent on


" Theming colour config
if (has("termguicolors"))
  set termguicolors
endif

syntax enable
colorscheme PaperColor

"For NerdTree toggle
map <C-n> :NERDTreeToggle<CR>

" Split pane keymap
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Might need to split this out to it's own lua folder
if has('nvim') 
  " Find files using Telescope command-line sugar.
  nnoremap <leader>ff <cmd>Telescope find_files<cr>
  nnoremap <leader>fg <cmd>Telescope live_grep<cr>
  nnoremap <leader>fb <cmd>Telescope buffers<cr>
  nnoremap <leader>fh <cmd>Telescope help_tags<cr>

  " Use tab for trigger completion with characters ahead and navigate
  " NOTE: There's always complete item selected by default, you may want to enable
  " no select by `"suggest.noselect": true` in your configuration file
  " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
  " other plugin before putting this into your config
  inoremap <silent><expr> <TAB>
        \ coc#pum#visible() ? coc#pum#next(1) :
        \ CheckBackspace() ? "\<Tab>" :
        \ coc#refresh()
  inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

  " Make <CR> to accept selected completion item or notify coc.nvim to format
  " <C-g>u breaks current undo, please make your own choice
  inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                                \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

  function! CheckBackspace() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction

  " Use <c-space> to trigger completion
  if has('nvim')
    inoremap <silent><expr> <c-space> coc#refresh()
  else
    inoremap <silent><expr> <c-@> coc#refresh()
  endif

  " Use `[g` and `]g` to navigate diagnostics
  " Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
  nmap <silent> [g <Plug>(coc-diagnostic-prev)
  nmap <silent> ]g <Plug>(coc-diagnostic-next)

  " GoTo code navigation.
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)

  " Use K to show documentation in preview window
  nnoremap <silent> K :call ShowDocumentation()<CR>

  function! ShowDocumentation()
    if CocAction('hasProvider', 'hover')
      call CocActionAsync('doHover')
    else
      call feedkeys('K', 'in')
    endif
  endfunction

:lua << EOF
  metals_config = require'metals'.bare_config()
  metals_config.settings = {
     showImplicitArguments = true,
     excludedPackages = {
       "akka.actor.typed.javadsl",
       "com.github.swagger.akka.javadsl"
     }
  }

  metals_config.on_attach = function()
    require'completion'.on_attach();
  end

  metals_config.handlers["textDocument/publishDiagnostics"] = vim.lsp.with(
    vim.lsp.diagnostic.on_publish_diagnostics, {
      virtual_text = {
        prefix = '>>>',
      }
    }
  )
EOF

  if has('nvim-0.5')
    augroup lsp
      au!
      au FileType scala,sbt lua require('metals').initialize_or_attach(metals_config)
    augroup end
  endif

  autocmd FileType scala setlocal omnifunc=v:lua.vim.lsp.omnifunc

else

  " Ctrl-P Fuzzy Finder
  let g:ctrlp_map = '<c-p>'
  let g:ctrlp_cmd = 'CtrlP'
  let g:ctrlp_working_path_mode = 'r'
  let g:ctrlp_extensions = ['line']
  let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']

  " ALE linting
  let g:ale_sign_error = "❗️"
  let g:ale_sign_warning= "⚠️"
  let g:ale_line_on_enter = 0
  let g:ale_linters_ignore = {'typescript': ['tslint']}
  let g:ale_linters = {'haskell': ['hdevtools', 'hlint', 'hfmt']}

  highlight clear ALEErrorSign
  highlight clear ALEWarningSign

endif

" Rainbow Parentheses
let g:rainbow_active = 1

" vim-typescript
let g:typescript_ignore_typescriptdoc = 0

